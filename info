#include QMK_KEYBOARD_H

// Define layers
enum layers {
    _BASE,
    _LOWER,
    _RAISE,
    _ADJUST
};

// Define layer switching keys
#define LOWER MO(_LOWER)
#define RAISE MO(_RAISE)

// Define keymap
const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [_BASE] = LAYOUT_split(
        KC_Q,    KC_W,    KC_E,    KC_R,    KC_T,    KC_Y,    KC_U,
        KC_A,    KC_S,    KC_D,    KC_F,    KC_G,    KC_H,    KC_J,
        KC_Z,    KC_X,    KC_C,    KC_V,    KC_B,    KC_N,
        KC_1,    KC_2,    KC_3,    KC_4,    KC_5,    KC_6,    KC_7,
        KC_TAB,  KC_LCTL, KC_LALT, KC_LGUI, LOWER,
                          KC_SPC,  KC_ENT,  RAISE,
                          KC_BSPC, KC_DEL,  KC_ESC
    ),
    
    [_LOWER] = LAYOUT_split(
        KC_EXLM, KC_AT,   KC_HASH, KC_DLR,  KC_PERC, KC_CIRC, KC_AMPR,
        KC_1,    KC_2,    KC_3,    KC_4,    KC_5,    KC_6,    KC_7,
        KC_8,    KC_9,    KC_0,    KC_MINS, KC_EQL,  KC_GRV,
        _______, _______, _______, _______, _______, _______, _______,
        _______, _______, _______, _______, _______,
                          _______, _______, _______,
                          _______, _______, _______
    ),
    
    [_RAISE] = LAYOUT_split(
        KC_F1,   KC_F2,   KC_F3,   KC_F4,   KC_F5,   KC_F6,   KC_F7,
        KC_F8,   KC_F9,   KC_F10,  KC_F11,  KC_F12,  _______, _______,
        _______, _______, _______, _______, _______, _______,
        _______, _______, _______, _______, _______, _______, _______,
        _______, _______, _______, _______, _______,
                          _______, _______, _______,
                          _______, _______, _______
    ),
    
    [_ADJUST] = LAYOUT_split(
        RESET,   _______, _______, _______, _______, _______, _______,
        _______, _______, _______, _______, _______, _______, _______,
        _______, _______, _______, _______, _______, _______,
        _______, _______, _______, _______, _______, _______, _______,
        _______, _______, _______, _______, _______,
                          _______, _______, _______,
                          _______, _______, _______
    )
};

// Define encoder behavior (if applicable)
#ifdef ENCODER_ENABLE
bool encoder_update_user(uint8_t index, bool clockwise) {
    if (index == 0) {  // Left encoder
        if (clockwise) {
            tap_code(KC_VOLU);
        } else {
            tap_code(KC_VOLD);
        }
    } else if (index == 1) {  // Right encoder
        if (clockwise) {
            tap_code(KC_PGDN);
        } else {
            tap_code(KC_PGUP);
        }
    }
    return false;
}
#endif

// Define OLED behavior (if applicable)
#ifdef OLED_ENABLE
void oled_task_user(void) {
    oled_write_P(PSTR("Layer: "), false);
    switch (biton32(layer_state)) {
        case _BASE:
            oled_write_P(PSTR("BASE\n"), false);
            break;
        case _LOWER:
            oled_write_P(PSTR("LOWER\n"), false);
            break;
        case _RAISE:
            oled_write_P(PSTR("RAISE\n"), false);
            break;
        case _ADJUST:
            oled_write_P(PSTR("ADJUST\n"), false);
            break;
        default:
            oled_write_P(PSTR("UNKNOWN\n"), false);
    }
}
#endif